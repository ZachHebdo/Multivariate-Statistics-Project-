mean(extended_sample)
}
# Fonction pour calculer la moyenne tronquée
calc_truncated_mean <- function(x, sample, alpha) {
extended_sample <- c(sample, x)
sorted_sample <- sort(extended_sample)
trunc_limit <- floor(alpha * length(sorted_sample))
mean(sorted_sample[(trunc_limit + 1):(length(sorted_sample) - trunc_limit)])
}
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
rowwise() %>%
mutate(
Simple = mean(c(sample, x)),
Winsorized = calc_winsorized_mean(x, sample, alpha),
Truncated = calc_truncated_mean(x, sample, alpha)
)
# Tracer les courbes d'influence avec ggplot2
ggplot(means_df) +
geom_line(aes(x = x, y = Simple), color = "blue") +
geom_line(aes(x = x, y = Winsorized), color = "red") +
geom_line(aes(x = x, y = Truncated), color = "green") +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
theme_minimal()
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsor.mean(c(sample, x), trim = alpha)),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Fonction pour calculer la moyenne winsorisée
calc_winsorized_mean <- function(x, sample, alpha) {
extended_sample <- c(sample, x)
lower <- quantile(extended_sample, probs = alpha)
upper <- quantile(extended_sample, probs = 1 - alpha)
extended_sample[extended_sample < lower] <- lower
extended_sample[extended_sample > upper] <- upper
mean(extended_sample)
}
# Fonction pour calculer la moyenne tronquée
calc_truncated_mean <- function(x, sample, alpha) {
extended_sample <- c(sample, x)
sorted_sample <- sort(extended_sample)
trunc_limit <- floor(alpha * length(sorted_sample))
mean(sorted_sample[(trunc_limit + 1):(length(sorted_sample) - trunc_limit)])
}
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
rowwise() %>%
mutate(
Simple = mean(c(sample, x)),
Winsorized = calc_winsorized_mean(x, sample, alpha),
Truncated = calc_truncated_mean(x, sample, alpha)
)
# Tracer les courbes d'influence avec ggplot2
ggplot(means_df) +
geom_line(aes(x = x, y = Simple), color = "blue") +
geom_line(aes(x = x, y = Winsorized), color = "red") +
geom_line(aes(x = x, y = Truncated), color = "green") +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
theme_minimal()
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
library(ggplot2)
library(dplyr)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Fonction pour calculer la moyenne winsorisée
calc_winsorized_mean <- function(x, sample, alpha) {
extended_sample <- c(sample, x)
lower <- quantile(extended_sample, probs = alpha)
upper <- quantile(extended_sample, probs = 1 - alpha)
extended_sample[extended_sample < lower] <- lower
extended_sample[extended_sample > upper] <- upper
mean(extended_sample)
}
# Fonction pour calculer la moyenne tronquée
calc_truncated_mean <- function(x, sample, alpha) {
extended_sample <- c(sample, x)
sorted_sample <- sort(extended_sample)
trunc_limit <- floor(alpha * length(sorted_sample))
mean(sorted_sample[(trunc_limit + 1):(length(sorted_sample) - trunc_limit)])
}
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
rowwise() %>%
mutate(
Simple = mean(c(sample, x)),
Winsorized = calc_winsorized_mean(x, sample, alpha),
Truncated = calc_truncated_mean(x, sample, alpha)
)
# Tracer les courbes d'influence avec ggplot2
ggplot(means_df) +
geom_line(aes(x = x, y = Simple), color = "blue") +
geom_line(aes(x = x, y = Winsorized), color = "red") +
geom_line(aes(x = x, y = Truncated), color = "green") +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
theme_minimal()
?mutate
View(means_df)
library(ggplot2)
library(psych)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsor.mean(c(sample, x), trim = alpha)),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
library(ggplot2)
library(psych)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsor.mean(c(sample, x), trim = alpha)),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
library(dplyr)
source("~/Documents/Msc Statistics/Inference Robuste/Devoir1Ex5.R")
library(ggplot2)
library(psych)
library(dplyr)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsor.mean(c(sample, x), trim = alpha)),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
?winsor.mean
winsor.mean((10, 20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0,05)
winsor.mean((10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0,05)
winsor.mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0,05)
winsor.mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0,1)
winsor.mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0,05)
winsor.mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0.05)
winsor.mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0.1)
winsorize <- function(x, alpha) {
x <- sort(x)
n <- length(x)
x[1:ceiling(alpha * n)] <- x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] <- x[n - ceiling(alpha * n)]
x
}
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), trim=0.1)
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
mean(winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05))
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) mean(winsorize(c(sample, x), trim = alpha))),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
library(dplyr)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
winsorize <- function(x, alpha) {
x <- sort(x)
n <- length(x)
x[1:ceiling(alpha * n)] <- x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] <- x[n - ceiling(alpha * n)]
x
}
mean(winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05))
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) mean(winsorize(c(sample, x), trim = alpha))),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) mean(winsorize(c(sample, x), alpha))),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
library(ggplot2)
library(ggplot2)
library(dplyr)
set.seed(1242) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
winsorize <- function(x, alpha) {
x <- sort(x)
n <- length(x)
x[1:ceiling(alpha * n)] <- x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] <- x[n - ceiling(alpha * n)]
x
}
mean(winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05))
# Générer un échantillon à partir d'une distribution normale centrée-réduite
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) mean(winsorize(c(sample, x), alpha))),
Truncated = sapply(x, function(x) mean(c(sample, x), trim = alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100),trim= 0.05))
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
truncate(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
truncate <- function(x, alpha) {
x <- sort(x)
n <- length(x)
# Calculer le nombre de valeurs à tronquer de chaque côté
trunc_amount = ceiling(alpha * n)
# Supprimer les valeurs tronquées des deux extrémités
x_truncated <- x[(trunc_amount + 1):(n - trunc_amount)]
# Retourner la moyenne des valeurs restantes
mean(x_truncated)
}
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
truncate(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
winsorize <- function(x, alpha) {
x <- sort(x)
n <- length(x)
x[1:ceiling(alpha * n)] <- x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] <- x[n - ceiling(alpha * n)]
mean(x)
}
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsorize(c(sample, x), alpha)),
Truncated = sapply(x, function(x) truncate(c(sample, x), alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsorize(c(sample, x), alpha)),
Truncated = sapply(x, function(x) truncate(c(sample, x), alpha))
)
# Tracer les courbes d'influence avec ggplot2, ajout d'une légende
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
set.seed(12) # Pour reproduire les mêmes résultats
n <- 200
alpha <- 0.05
winsorize <- function(x, alpha) {
x <- sort(x)
n <- length(x)
# remplacer les valeurs tronquées des deux extrémités
x[1:ceiling(alpha * n)] <- x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] <- x[n - ceiling(alpha * n)]
mean(x)
}
truncate <- function(x, alpha) {
x <- sort(x)
n <- length(x)
# Supprimer les valeurs tronquées des deux extrémités
x_truncated <- x[(ceiling(alpha * n) + 1):(n - ceiling(alpha * n))]
mean(x_truncated)
}
#ex1
mean(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
winsorize(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
truncate(c(10,20, 25, 30, 35, 45, 50, 60, 80, 100), 0.05)
#ex5
sample <- rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées
x_values <- seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes
means_df <- data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsorize(c(sample, x), alpha)),
Truncated = sapply(x, function(x) truncate(c(sample, x), alpha))
)
#les courbes d'influence
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "Valeur ajoutée", y = "Estimation", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
View(means_df)
dataset_exo1 = c(10,20, 25, 30, 35, 45, 50, 60, 80, 100)
mean(dataset_exo1, alpha)
winsorize(dataset_exo1, alpha)
truncate(dataset_exo1, alpha)
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "EIF(x)", y = "X", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
#les courbes d'influence
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "X", y = "EIF(x)", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red", "Moyenne Tronquée" = "green")) +
theme_minimal() +
guides(color = guide_legend(title = "Estimateurs"))
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "X", y = "EIF(x)", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red",
"Moyenne Tronquée" = "green")) +
theme_gray() +
guides(color = guide_legend(title = "Estimateurs"))
#les courbes d'influence
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "X", y = "EIF(x)", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red",
"Moyenne Tronquée" = "green")) +
theme_classic() +
guides(color = guide_legend(title = "Estimateurs"))
library(ggplot2)
library(dplyr)
set.seed(12) # Pour reproduire les mêmes résultats pour l'exo 5
alpha = 0.05
winsorize = function(x, alpha) {
x = sort(x)
n = length(x)
# remplacer les valeurs tronquées des deux extrémités
x[1:ceiling(alpha * n)] = x[ceiling(alpha * n) + 1]
x[(n - ceiling(alpha * n) + 1):n] = x[n - ceiling(alpha * n)]
mean(x)
}
truncate = function(x, alpha) {
x = sort(x)
n = length(x)
# Supprimer les valeurs tronquées des deux extrémités
x_truncated = x[(ceiling(alpha * n) + 1):(n - ceiling(alpha * n))]
mean(x_truncated)
}
#ex1
dataset_exo1 = c(10, 20, 25, 30, 35, 45, 50, 60, 80, 100)
mean(dataset_exo1, alpha)
truncate(dataset_exo1, alpha)
winsorize(dataset_exo1, alpha)
#ex5
n = 200
sample = rnorm(n, mean = 0, sd = 1)
# Valeurs de x pour lesquelles les moyennes sont calculées, aller plus loins que
# les valeurs dans le dataset
x_values = seq(min(sample) - 3, max(sample) + 3, length.out = 400)
# Calcul des moyennes et ajout dans une matrix
means_df = data.frame(x = x_values) %>%
mutate(
Simple = sapply(x, function(x) mean(c(sample, x))),
Winsorized = sapply(x, function(x) winsorize(c(sample, x), alpha)),
Truncated = sapply(x, function(x) truncate(c(sample, x), alpha))
)
#les courbes d'influence
ggplot(means_df, aes(x = x)) +
geom_line(aes(y = Simple, color = "Moyenne Simple")) +
geom_line(aes(y = Winsorized, color = "Moyenne Winsorisée")) +
geom_line(aes(y = Truncated, color = "Moyenne Tronquée")) +
labs(x = "X", y = "EIF(x)", title = "Courbes d'influence pour différents estimateurs") +
scale_color_manual(values = c("Moyenne Simple" = "blue", "Moyenne Winsorisée" = "red",
"Moyenne Tronquée" = "green")) +
theme_classic() +
guides(color = guide_legend(title = "Estimateurs"))
x_values_ex2 = seq(min(dataset_exo1) - 50, max(dataset_exo1) + 50, by = 1)
winsorized_ex2 = sapply(x_values_ex2, function(x) winsorize(c(dataset_exo1,x),alpha))
ggplot() +
geom_line(aes(x = x_values, y = winsorized_means), color = "blue") +
labs(title = "Fonction d'influence de la moyenne winsorisée",
x = "Valeur ajoutée",
y = "Moyenne winsorisée") +
theme_classic()
x_values_ex2 = seq(min(dataset_exo1) - 50, max(dataset_exo1) + 50, by = 1)
winsorized_ex2 = sapply(x_values_ex2, function(x) winsorize(c(dataset_exo1,x),alpha))
ggplot() +
geom_line(aes(x = x_values_ex2, y = winsorized_ex2), color = "blue") +
labs(title = "Fonction d'influence de la moyenne winsorisée",
x = "X",
y = "EIF(x)") +
theme_classic()
setwd("~/Documents/Msc Statistics/Analyse Statistique Multivarié/Project/Multivariate-Statistics-Project-")
setwd("/Users/zach/Documents/Msc Statistics/Analyse Statistique Multivarié/Project/Multivariate-Statistics-Project-")
db_final = read_csv("db_final.csv")
library(readr)
db_final = read_csv("db_final.csv")
library(tidyverse)
library(dplyr)
